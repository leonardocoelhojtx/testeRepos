/**
 * moment-date-time-adapter.class
 */
import { InjectionToken } from '@angular/core';
import { Moment } from 'moment/moment';
import { DateTimeAdapter } from '../date-time-adapter.class';
/** Configurable options for {@see MomentDateAdapter}. */
import * as ɵngcc0 from '@angular/core';
export interface OwlMomentDateTimeAdapterOptions {
    /**
     * Turns the use of utc dates on or off.
     * Changing this will change how the DateTimePicker output value.
     * {@default false}
     */
    useUtc: boolean;
}
/** InjectionToken for moment date adapter to configure options. */
export declare const OWL_MOMENT_DATE_TIME_ADAPTER_OPTIONS: InjectionToken<OwlMomentDateTimeAdapterOptions>;
/** @docs-private */
export declare function OWL_MOMENT_DATE_TIME_ADAPTER_OPTIONS_FACTORY(): OwlMomentDateTimeAdapterOptions;
export declare class MomentDateTimeAdapter extends DateTimeAdapter<Moment> {
    private owlDateTimeLocale;
    private options?;
    private _localeData;
    constructor(owlDateTimeLocale: string, options?: OwlMomentDateTimeAdapterOptions);
    setLocale(locale: string): void;
    getYear(date: Moment): number;
    getMonth(date: Moment): number;
    getDay(date: Moment): number;
    getDate(date: Moment): number;
    getHours(date: Moment): number;
    getMinutes(date: Moment): number;
    getSeconds(date: Moment): number;
    getTime(date: Moment): number;
    getNumDaysInMonth(date: Moment): number;
    differenceInCalendarDays(dateLeft: Moment, dateRight: Moment): number;
    getYearName(date: Moment): string;
    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];
    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];
    getDateNames(): string[];
    toIso8601(date: Moment): string;
    isEqual(dateLeft: Moment, dateRight: Moment): boolean;
    isSameDay(dateLeft: Moment, dateRight: Moment): boolean;
    isValid(date: Moment): boolean;
    invalid(): Moment;
    isDateInstance(obj: any): boolean;
    addCalendarYears(date: Moment, amount: number): Moment;
    addCalendarMonths(date: Moment, amount: number): Moment;
    addCalendarDays(date: Moment, amount: number): Moment;
    setHours(date: Moment, amount: number): Moment;
    setMinutes(date: Moment, amount: number): Moment;
    setSeconds(date: Moment, amount: number): Moment;
    createDate(year: number, month: number, date: number): Moment;
    clone(date: Moment): Moment;
    now(): Moment;
    format(date: Moment, displayFormat: any): string;
    parse(value: any, parseFormat: any): Moment | null;
    /**
     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
     * string into null. Returns an invalid date for all other values.
     */
    deserialize(value: any): Moment | null;
    /** Creates a Moment instance while respecting the current UTC settings. */
    private createMoment;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MomentDateTimeAdapter>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MomentDateTimeAdapter>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50LWRhdGUtdGltZS1hZGFwdGVyLmNsYXNzLmQudHMiLCJzb3VyY2VzIjpbIm1vbWVudC1kYXRlLXRpbWUtYWRhcHRlci5jbGFzcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlEQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogbW9tZW50LWRhdGUtdGltZS1hZGFwdGVyLmNsYXNzXG4gKi9cbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNb21lbnQgfSBmcm9tICdtb21lbnQvbW9tZW50JztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4uL2RhdGUtdGltZS1hZGFwdGVyLmNsYXNzJztcbi8qKiBDb25maWd1cmFibGUgb3B0aW9ucyBmb3Ige0BzZWUgTW9tZW50RGF0ZUFkYXB0ZXJ9LiAqL1xuZXhwb3J0IGludGVyZmFjZSBPd2xNb21lbnREYXRlVGltZUFkYXB0ZXJPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgdXNlIG9mIHV0YyBkYXRlcyBvbiBvciBvZmYuXG4gICAgICogQ2hhbmdpbmcgdGhpcyB3aWxsIGNoYW5nZSBob3cgdGhlIERhdGVUaW1lUGlja2VyIG91dHB1dCB2YWx1ZS5cbiAgICAgKiB7QGRlZmF1bHQgZmFsc2V9XG4gICAgICovXG4gICAgdXNlVXRjOiBib29sZWFuO1xufVxuLyoqIEluamVjdGlvblRva2VuIGZvciBtb21lbnQgZGF0ZSBhZGFwdGVyIHRvIGNvbmZpZ3VyZSBvcHRpb25zLiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgT1dMX01PTUVOVF9EQVRFX1RJTUVfQURBUFRFUl9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxPd2xNb21lbnREYXRlVGltZUFkYXB0ZXJPcHRpb25zPjtcbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBPV0xfTU9NRU5UX0RBVEVfVElNRV9BREFQVEVSX09QVElPTlNfRkFDVE9SWSgpOiBPd2xNb21lbnREYXRlVGltZUFkYXB0ZXJPcHRpb25zO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTW9tZW50RGF0ZVRpbWVBZGFwdGVyIGV4dGVuZHMgRGF0ZVRpbWVBZGFwdGVyPE1vbWVudD4ge1xuICAgIHByaXZhdGUgb3dsRGF0ZVRpbWVMb2NhbGU7XG4gICAgcHJpdmF0ZSBvcHRpb25zPztcbiAgICBwcml2YXRlIF9sb2NhbGVEYXRhO1xuICAgIGNvbnN0cnVjdG9yKG93bERhdGVUaW1lTG9jYWxlOiBzdHJpbmcsIG9wdGlvbnM/OiBPd2xNb21lbnREYXRlVGltZUFkYXB0ZXJPcHRpb25zKTtcbiAgICBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiB2b2lkO1xuICAgIGdldFllYXIoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xuICAgIGdldE1vbnRoKGRhdGU6IE1vbWVudCk6IG51bWJlcjtcbiAgICBnZXREYXkoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xuICAgIGdldERhdGUoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xuICAgIGdldEhvdXJzKGRhdGU6IE1vbWVudCk6IG51bWJlcjtcbiAgICBnZXRNaW51dGVzKGRhdGU6IE1vbWVudCk6IG51bWJlcjtcbiAgICBnZXRTZWNvbmRzKGRhdGU6IE1vbWVudCk6IG51bWJlcjtcbiAgICBnZXRUaW1lKGRhdGU6IE1vbWVudCk6IG51bWJlcjtcbiAgICBnZXROdW1EYXlzSW5Nb250aChkYXRlOiBNb21lbnQpOiBudW1iZXI7XG4gICAgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGVMZWZ0OiBNb21lbnQsIGRhdGVSaWdodDogTW9tZW50KTogbnVtYmVyO1xuICAgIGdldFllYXJOYW1lKGRhdGU6IE1vbWVudCk6IHN0cmluZztcbiAgICBnZXRNb250aE5hbWVzKHN0eWxlOiAnbG9uZycgfCAnc2hvcnQnIHwgJ25hcnJvdycpOiBzdHJpbmdbXTtcbiAgICBnZXREYXlPZldlZWtOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XG4gICAgZ2V0RGF0ZU5hbWVzKCk6IHN0cmluZ1tdO1xuICAgIHRvSXNvODYwMShkYXRlOiBNb21lbnQpOiBzdHJpbmc7XG4gICAgaXNFcXVhbChkYXRlTGVmdDogTW9tZW50LCBkYXRlUmlnaHQ6IE1vbWVudCk6IGJvb2xlYW47XG4gICAgaXNTYW1lRGF5KGRhdGVMZWZ0OiBNb21lbnQsIGRhdGVSaWdodDogTW9tZW50KTogYm9vbGVhbjtcbiAgICBpc1ZhbGlkKGRhdGU6IE1vbWVudCk6IGJvb2xlYW47XG4gICAgaW52YWxpZCgpOiBNb21lbnQ7XG4gICAgaXNEYXRlSW5zdGFuY2Uob2JqOiBhbnkpOiBib29sZWFuO1xuICAgIGFkZENhbGVuZGFyWWVhcnMoZGF0ZTogTW9tZW50LCBhbW91bnQ6IG51bWJlcik6IE1vbWVudDtcbiAgICBhZGRDYWxlbmRhck1vbnRocyhkYXRlOiBNb21lbnQsIGFtb3VudDogbnVtYmVyKTogTW9tZW50O1xuICAgIGFkZENhbGVuZGFyRGF5cyhkYXRlOiBNb21lbnQsIGFtb3VudDogbnVtYmVyKTogTW9tZW50O1xuICAgIHNldEhvdXJzKGRhdGU6IE1vbWVudCwgYW1vdW50OiBudW1iZXIpOiBNb21lbnQ7XG4gICAgc2V0TWludXRlcyhkYXRlOiBNb21lbnQsIGFtb3VudDogbnVtYmVyKTogTW9tZW50O1xuICAgIHNldFNlY29uZHMoZGF0ZTogTW9tZW50LCBhbW91bnQ6IG51bWJlcik6IE1vbWVudDtcbiAgICBjcmVhdGVEYXRlKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF0ZTogbnVtYmVyKTogTW9tZW50O1xuICAgIGNsb25lKGRhdGU6IE1vbWVudCk6IE1vbWVudDtcbiAgICBub3coKTogTW9tZW50O1xuICAgIGZvcm1hdChkYXRlOiBNb21lbnQsIGRpc3BsYXlGb3JtYXQ6IGFueSk6IHN0cmluZztcbiAgICBwYXJzZSh2YWx1ZTogYW55LCBwYXJzZUZvcm1hdDogYW55KTogTW9tZW50IHwgbnVsbDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnaXZlbiB2YWx1ZSBpZiBnaXZlbiBhIHZhbGlkIE1vbWVudCBvciBudWxsLiBEZXNlcmlhbGl6ZXMgdmFsaWQgSVNPIDg2MDEgc3RyaW5nc1xuICAgICAqIChodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzMzOS50eHQpIGFuZCB2YWxpZCBEYXRlIG9iamVjdHMgaW50byB2YWxpZCBNb21lbnRzIGFuZCBlbXB0eVxuICAgICAqIHN0cmluZyBpbnRvIG51bGwuIFJldHVybnMgYW4gaW52YWxpZCBkYXRlIGZvciBhbGwgb3RoZXIgdmFsdWVzLlxuICAgICAqL1xuICAgIGRlc2VyaWFsaXplKHZhbHVlOiBhbnkpOiBNb21lbnQgfCBudWxsO1xuICAgIC8qKiBDcmVhdGVzIGEgTW9tZW50IGluc3RhbmNlIHdoaWxlIHJlc3BlY3RpbmcgdGhlIGN1cnJlbnQgVVRDIHNldHRpbmdzLiAqL1xuICAgIHByaXZhdGUgY3JlYXRlTW9tZW50O1xufVxuIl19