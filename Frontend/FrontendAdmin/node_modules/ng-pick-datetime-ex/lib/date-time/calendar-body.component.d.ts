/**
 * calendar-body.component
 */
import { ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class CalendarCell {
    value: number;
    displayValue: string;
    ariaLabel: string;
    enabled: boolean;
    out: boolean;
    cellClass: string;
    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, out?: boolean, cellClass?: string);
}
export declare class OwlCalendarBodyComponent implements OnInit {
    private elmRef;
    private ngZone;
    /**
     * The cell number of the active cell in the table.
     */
    activeCell: number;
    /**
     * The cells to display in the table.
     * */
    rows: CalendarCell[][];
    /**
     * The number of columns in the table.
     * */
    numCols: number;
    /**
     * The ratio (width / height) to use for the cells in the table.
     */
    cellRatio: number;
    /**
     * The value in the table that corresponds to today.
     * */
    todayValue: number;
    /**
     * The value in the table that is currently selected.
     * */
    selectedValues: number[];
    /**
     * Current picker select mode
     */
    selectMode: SelectMode;
    /**
     * Emit when a calendar cell is selected
     * */
    readonly select: EventEmitter<CalendarCell>;
    get owlDTCalendarBodyClass(): boolean;
    get isInSingleMode(): boolean;
    get isInRangeMode(): boolean;
    constructor(elmRef: ElementRef, ngZone: NgZone);
    ngOnInit(): void;
    selectCell(cell: CalendarCell): void;
    isActiveCell(rowIndex: number, colIndex: number): boolean;
    /**
     * Check if the cell is selected
     */
    isSelected(value: number): boolean;
    /**
     * Check if the cell in the range
     * */
    isInRange(value: number): boolean;
    /**
     * Check if the cell is the range from
     * */
    isRangeFrom(value: number): boolean;
    /**
     * Check if the cell is the range to
     * */
    isRangeTo(value: number): boolean;
    /**
     * Focus to a active cell
     * */
    focusActiveCell(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlCalendarBodyComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlCalendarBodyComponent, "[owl-date-time-calendar-body]", ["owlDateTimeCalendarBody"], {
    "activeCell": "activeCell";
    "numCols": "numCols";
    "cellRatio": "cellRatio";
    "rows": "rows";
    "todayValue": "todayValue";
    "selectedValues": "selectedValues";
    "selectMode": "selectMode";
}, {
    "select": "select";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItYm9keS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItYm9keS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUVBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBjYWxlbmRhci1ib2R5LmNvbXBvbmVudFxuICovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3RNb2RlIH0gZnJvbSAnLi9kYXRlLXRpbWUuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FsZW5kYXJDZWxsIHtcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIGRpc3BsYXlWYWx1ZTogc3RyaW5nO1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgb3V0OiBib29sZWFuO1xuICAgIGNlbGxDbGFzczogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiBudW1iZXIsIGRpc3BsYXlWYWx1ZTogc3RyaW5nLCBhcmlhTGFiZWw6IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiwgb3V0PzogYm9vbGVhbiwgY2VsbENsYXNzPzogc3RyaW5nKTtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE93bENhbGVuZGFyQm9keUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBlbG1SZWY7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgLyoqXG4gICAgICogVGhlIGNlbGwgbnVtYmVyIG9mIHRoZSBhY3RpdmUgY2VsbCBpbiB0aGUgdGFibGUuXG4gICAgICovXG4gICAgYWN0aXZlQ2VsbDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjZWxscyB0byBkaXNwbGF5IGluIHRoZSB0YWJsZS5cbiAgICAgKiAqL1xuICAgIHJvd3M6IENhbGVuZGFyQ2VsbFtdW107XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSB0YWJsZS5cbiAgICAgKiAqL1xuICAgIG51bUNvbHM6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmF0aW8gKHdpZHRoIC8gaGVpZ2h0KSB0byB1c2UgZm9yIHRoZSBjZWxscyBpbiB0aGUgdGFibGUuXG4gICAgICovXG4gICAgY2VsbFJhdGlvOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGluIHRoZSB0YWJsZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRvZGF5LlxuICAgICAqICovXG4gICAgdG9kYXlWYWx1ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBpbiB0aGUgdGFibGUgdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuXG4gICAgICogKi9cbiAgICBzZWxlY3RlZFZhbHVlczogbnVtYmVyW107XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBwaWNrZXIgc2VsZWN0IG1vZGVcbiAgICAgKi9cbiAgICBzZWxlY3RNb2RlOiBTZWxlY3RNb2RlO1xuICAgIC8qKlxuICAgICAqIEVtaXQgd2hlbiBhIGNhbGVuZGFyIGNlbGwgaXMgc2VsZWN0ZWRcbiAgICAgKiAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdDogRXZlbnRFbWl0dGVyPENhbGVuZGFyQ2VsbD47XG4gICAgZ2V0IG93bERUQ2FsZW5kYXJCb2R5Q2xhc3MoKTogYm9vbGVhbjtcbiAgICBnZXQgaXNJblNpbmdsZU1vZGUoKTogYm9vbGVhbjtcbiAgICBnZXQgaXNJblJhbmdlTW9kZSgpOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsbVJlZjogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgc2VsZWN0Q2VsbChjZWxsOiBDYWxlbmRhckNlbGwpOiB2b2lkO1xuICAgIGlzQWN0aXZlQ2VsbChyb3dJbmRleDogbnVtYmVyLCBjb2xJbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgY2VsbCBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQodmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGNlbGwgaW4gdGhlIHJhbmdlXG4gICAgICogKi9cbiAgICBpc0luUmFuZ2UodmFsdWU6IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGNlbGwgaXMgdGhlIHJhbmdlIGZyb21cbiAgICAgKiAqL1xuICAgIGlzUmFuZ2VGcm9tKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBjZWxsIGlzIHRoZSByYW5nZSB0b1xuICAgICAqICovXG4gICAgaXNSYW5nZVRvKHZhbHVlOiBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZvY3VzIHRvIGEgYWN0aXZlIGNlbGxcbiAgICAgKiAqL1xuICAgIGZvY3VzQWN0aXZlQ2VsbCgpOiB2b2lkO1xufVxuIl19