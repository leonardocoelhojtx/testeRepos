/**
 * calendar-month-view.component
 */
import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { CalendarCell, OwlCalendarBodyComponent } from './calendar-body.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTimeFormats } from './adapter/date-time-format.class';
import { SelectMode } from './date-time.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlMonthViewComponent<T> implements OnInit, AfterContentInit, OnDestroy {
    private cdRef;
    private dateTimeAdapter;
    private dateTimeFormats;
    /**
     * Whether to hide dates in other months at the start or end of the current month.
     * */
    hideOtherMonths: boolean;
    /**
     * Define the first day of a week
     * Sunday: 0 ~ Saturday: 6
     * */
    private _firstDayOfWeek;
    get firstDayOfWeek(): number;
    set firstDayOfWeek(val: number);
    /**
     * The select mode of the picker;
     * */
    private _selectMode;
    get selectMode(): SelectMode;
    set selectMode(val: SelectMode);
    /** The currently selected date. */
    private _selected;
    get selected(): T | null;
    set selected(value: T | null);
    private _selecteds;
    get selecteds(): T[];
    set selecteds(values: T[]);
    private _pickerMoment;
    get pickerMoment(): T;
    set pickerMoment(value: T);
    /**
     * A function used to filter which dates are selectable
     * */
    private _dateFilter;
    get dateFilter(): (date: T) => boolean;
    set dateFilter(filter: (date: T) => boolean);
    /** The minimum selectable date. */
    private _minDate;
    get minDate(): T | null;
    set minDate(value: T | null);
    /** The maximum selectable date. */
    private _maxDate;
    get maxDate(): T | null;
    set maxDate(value: T | null);
    private _weekdays;
    get weekdays(): {
        long: string;
        short: string;
        narrow: string;
    }[];
    private _days;
    get days(): CalendarCell[][];
    get activeCell(): number;
    get isInSingleMode(): boolean;
    get isInRangeMode(): boolean;
    private firstDateOfMonth;
    private localeSub;
    private initiated;
    private dateNames;
    /**
     * The date of the month that today falls on.
     * */
    todayDate: number | null;
    /**
     * An array to hold all selectedDates' value
     * the value is the day number in current month
     * */
    selectedDates: number[];
    firstRowOffset: number;
    /**
     * Callback to invoke when a new date is selected
     * */
    readonly selectedChange: EventEmitter<T>;
    /**
     * Callback to invoke when any date is selected.
     * */
    readonly userSelection: EventEmitter<void>;
    /** Emits when any date is activated. */
    readonly pickerMomentChange: EventEmitter<T>;
    /** The body of calendar table */
    calendarBodyElm: OwlCalendarBodyComponent;
    get owlDTCalendarView(): boolean;
    constructor(cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>, dateTimeFormats: OwlDateTimeFormats);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Handle a calendarCell selected
     */
    selectCalendarCell(cell: CalendarCell): void;
    /**
     * Handle a new date selected
     */
    private selectDate;
    /**
     * Handle keydown event on calendar body
     */
    handleCalendarKeydown(event: KeyboardEvent): void;
    /**
     * Generate the calendar weekdays array
     * */
    private generateWeekDays;
    /**
     * Generate the calendar days array
     * */
    private generateCalendar;
    /**
     * Creates CalendarCell for days.
     */
    private createDateCell;
    /**
     * Check if the date is valid
     */
    private isDateEnabled;
    /**
     * Get a valid date object
     */
    private getValidDate;
    /**
     * Check if the give dates are none-null and in the same month
     */
    isSameMonth(dateLeft: T, dateRight: T): boolean;
    /**
     * Set the selectedDates value.
     * In single mode, it has only one value which represent the selected date
     * In range mode, it would has two values, one for the fromValue and the other for the toValue
     * */
    private setSelectedDates;
    private focusActiveCell;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlMonthViewComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlMonthViewComponent<any>, "owl-date-time-month-view", ["owlYearView"], {
    "hideOtherMonths": "hideOtherMonths";
    "firstDayOfWeek": "firstDayOfWeek";
    "selectMode": "selectMode";
    "selected": "selected";
    "selecteds": "selecteds";
    "pickerMoment": "pickerMoment";
    "dateFilter": "dateFilter";
    "minDate": "minDate";
    "maxDate": "maxDate";
}, {
    "selectedChange": "selectedChange";
    "userSelection": "userSelection";
    "pickerMomentChange": "pickerMomentChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItbW9udGgtdmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItbW9udGgtdmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0lBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBjYWxlbmRhci1tb250aC12aWV3LmNvbXBvbmVudFxuICovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FsZW5kYXJDZWxsLCBPd2xDYWxlbmRhckJvZHlDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLWJvZHkuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUZvcm1hdHMgfSBmcm9tICcuL2FkYXB0ZXIvZGF0ZS10aW1lLWZvcm1hdC5jbGFzcyc7XG5pbXBvcnQgeyBTZWxlY3RNb2RlIH0gZnJvbSAnLi9kYXRlLXRpbWUuY2xhc3MnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgT3dsTW9udGhWaWV3Q29tcG9uZW50PFQ+IGltcGxlbWVudHMgT25Jbml0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUFkYXB0ZXI7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUZvcm1hdHM7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBoaWRlIGRhdGVzIGluIG90aGVyIG1vbnRocyBhdCB0aGUgc3RhcnQgb3IgZW5kIG9mIHRoZSBjdXJyZW50IG1vbnRoLlxuICAgICAqICovXG4gICAgaGlkZU90aGVyTW9udGhzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERlZmluZSB0aGUgZmlyc3QgZGF5IG9mIGEgd2Vla1xuICAgICAqIFN1bmRheTogMCB+IFNhdHVyZGF5OiA2XG4gICAgICogKi9cbiAgICBwcml2YXRlIF9maXJzdERheU9mV2VlaztcbiAgICBnZXQgZmlyc3REYXlPZldlZWsoKTogbnVtYmVyO1xuICAgIHNldCBmaXJzdERheU9mV2Vlayh2YWw6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdCBtb2RlIG9mIHRoZSBwaWNrZXI7XG4gICAgICogKi9cbiAgICBwcml2YXRlIF9zZWxlY3RNb2RlO1xuICAgIGdldCBzZWxlY3RNb2RlKCk6IFNlbGVjdE1vZGU7XG4gICAgc2V0IHNlbGVjdE1vZGUodmFsOiBTZWxlY3RNb2RlKTtcbiAgICAvKiogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBkYXRlLiAqL1xuICAgIHByaXZhdGUgX3NlbGVjdGVkO1xuICAgIGdldCBzZWxlY3RlZCgpOiBUIHwgbnVsbDtcbiAgICBzZXQgc2VsZWN0ZWQodmFsdWU6IFQgfCBudWxsKTtcbiAgICBwcml2YXRlIF9zZWxlY3RlZHM7XG4gICAgZ2V0IHNlbGVjdGVkcygpOiBUW107XG4gICAgc2V0IHNlbGVjdGVkcyh2YWx1ZXM6IFRbXSk7XG4gICAgcHJpdmF0ZSBfcGlja2VyTW9tZW50O1xuICAgIGdldCBwaWNrZXJNb21lbnQoKTogVDtcbiAgICBzZXQgcGlja2VyTW9tZW50KHZhbHVlOiBUKTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHVzZWQgdG8gZmlsdGVyIHdoaWNoIGRhdGVzIGFyZSBzZWxlY3RhYmxlXG4gICAgICogKi9cbiAgICBwcml2YXRlIF9kYXRlRmlsdGVyO1xuICAgIGdldCBkYXRlRmlsdGVyKCk6IChkYXRlOiBUKSA9PiBib29sZWFuO1xuICAgIHNldCBkYXRlRmlsdGVyKGZpbHRlcjogKGRhdGU6IFQpID0+IGJvb2xlYW4pO1xuICAgIC8qKiBUaGUgbWluaW11bSBzZWxlY3RhYmxlIGRhdGUuICovXG4gICAgcHJpdmF0ZSBfbWluRGF0ZTtcbiAgICBnZXQgbWluRGF0ZSgpOiBUIHwgbnVsbDtcbiAgICBzZXQgbWluRGF0ZSh2YWx1ZTogVCB8IG51bGwpO1xuICAgIC8qKiBUaGUgbWF4aW11bSBzZWxlY3RhYmxlIGRhdGUuICovXG4gICAgcHJpdmF0ZSBfbWF4RGF0ZTtcbiAgICBnZXQgbWF4RGF0ZSgpOiBUIHwgbnVsbDtcbiAgICBzZXQgbWF4RGF0ZSh2YWx1ZTogVCB8IG51bGwpO1xuICAgIHByaXZhdGUgX3dlZWtkYXlzO1xuICAgIGdldCB3ZWVrZGF5cygpOiB7XG4gICAgICAgIGxvbmc6IHN0cmluZztcbiAgICAgICAgc2hvcnQ6IHN0cmluZztcbiAgICAgICAgbmFycm93OiBzdHJpbmc7XG4gICAgfVtdO1xuICAgIHByaXZhdGUgX2RheXM7XG4gICAgZ2V0IGRheXMoKTogQ2FsZW5kYXJDZWxsW11bXTtcbiAgICBnZXQgYWN0aXZlQ2VsbCgpOiBudW1iZXI7XG4gICAgZ2V0IGlzSW5TaW5nbGVNb2RlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzSW5SYW5nZU1vZGUoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGZpcnN0RGF0ZU9mTW9udGg7XG4gICAgcHJpdmF0ZSBsb2NhbGVTdWI7XG4gICAgcHJpdmF0ZSBpbml0aWF0ZWQ7XG4gICAgcHJpdmF0ZSBkYXRlTmFtZXM7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgb2YgdGhlIG1vbnRoIHRoYXQgdG9kYXkgZmFsbHMgb24uXG4gICAgICogKi9cbiAgICB0b2RheURhdGU6IG51bWJlciB8IG51bGw7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgdG8gaG9sZCBhbGwgc2VsZWN0ZWREYXRlcycgdmFsdWVcbiAgICAgKiB0aGUgdmFsdWUgaXMgdGhlIGRheSBudW1iZXIgaW4gY3VycmVudCBtb250aFxuICAgICAqICovXG4gICAgc2VsZWN0ZWREYXRlczogbnVtYmVyW107XG4gICAgZmlyc3RSb3dPZmZzZXQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhIG5ldyBkYXRlIGlzIHNlbGVjdGVkXG4gICAgICogKi9cbiAgICByZWFkb25seSBzZWxlY3RlZENoYW5nZTogRXZlbnRFbWl0dGVyPFQ+O1xuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFueSBkYXRlIGlzIHNlbGVjdGVkLlxuICAgICAqICovXG4gICAgcmVhZG9ubHkgdXNlclNlbGVjdGlvbjogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIC8qKiBFbWl0cyB3aGVuIGFueSBkYXRlIGlzIGFjdGl2YXRlZC4gKi9cbiAgICByZWFkb25seSBwaWNrZXJNb21lbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxUPjtcbiAgICAvKiogVGhlIGJvZHkgb2YgY2FsZW5kYXIgdGFibGUgKi9cbiAgICBjYWxlbmRhckJvZHlFbG06IE93bENhbGVuZGFyQm9keUNvbXBvbmVudDtcbiAgICBnZXQgb3dsRFRDYWxlbmRhclZpZXcoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+LCBkYXRlVGltZUZvcm1hdHM6IE93bERhdGVUaW1lRm9ybWF0cyk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhIGNhbGVuZGFyQ2VsbCBzZWxlY3RlZFxuICAgICAqL1xuICAgIHNlbGVjdENhbGVuZGFyQ2VsbChjZWxsOiBDYWxlbmRhckNlbGwpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhIG5ldyBkYXRlIHNlbGVjdGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3REYXRlO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBrZXlkb3duIGV2ZW50IG9uIGNhbGVuZGFyIGJvZHlcbiAgICAgKi9cbiAgICBoYW5kbGVDYWxlbmRhcktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBjYWxlbmRhciB3ZWVrZGF5cyBhcnJheVxuICAgICAqICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVdlZWtEYXlzO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHRoZSBjYWxlbmRhciBkYXlzIGFycmF5XG4gICAgICogKi9cbiAgICBwcml2YXRlIGdlbmVyYXRlQ2FsZW5kYXI7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBDYWxlbmRhckNlbGwgZm9yIGRheXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVEYXRlQ2VsbDtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgZGF0ZSBpcyB2YWxpZFxuICAgICAqL1xuICAgIHByaXZhdGUgaXNEYXRlRW5hYmxlZDtcbiAgICAvKipcbiAgICAgKiBHZXQgYSB2YWxpZCBkYXRlIG9iamVjdFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0VmFsaWREYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBnaXZlIGRhdGVzIGFyZSBub25lLW51bGwgYW5kIGluIHRoZSBzYW1lIG1vbnRoXG4gICAgICovXG4gICAgaXNTYW1lTW9udGgoZGF0ZUxlZnQ6IFQsIGRhdGVSaWdodDogVCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzZWxlY3RlZERhdGVzIHZhbHVlLlxuICAgICAqIEluIHNpbmdsZSBtb2RlLCBpdCBoYXMgb25seSBvbmUgdmFsdWUgd2hpY2ggcmVwcmVzZW50IHRoZSBzZWxlY3RlZCBkYXRlXG4gICAgICogSW4gcmFuZ2UgbW9kZSwgaXQgd291bGQgaGFzIHR3byB2YWx1ZXMsIG9uZSBmb3IgdGhlIGZyb21WYWx1ZSBhbmQgdGhlIG90aGVyIGZvciB0aGUgdG9WYWx1ZVxuICAgICAqICovXG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RlZERhdGVzO1xuICAgIHByaXZhdGUgZm9jdXNBY3RpdmVDZWxsO1xufVxuIl19