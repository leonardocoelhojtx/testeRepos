/**
 * timer.component
 */
import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';
import { OwlDateTimeIntl } from './date-time-picker-intl.service';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import * as ɵngcc0 from '@angular/core';
export declare class OwlTimerComponent<T> implements OnInit {
    private ngZone;
    private elmRef;
    private pickerIntl;
    private cdRef;
    private dateTimeAdapter;
    /** The current picker moment */
    private _pickerMoment;
    get pickerMoment(): T;
    set pickerMoment(value: T);
    /** The minimum selectable date time. */
    private _minDateTime;
    get minDateTime(): T | null;
    set minDateTime(value: T | null);
    /** The maximum selectable date time. */
    private _maxDateTime;
    get maxDateTime(): T | null;
    set maxDateTime(value: T | null);
    private isPM;
    /**
     * Whether to show the second's timer
     */
    showSecondsTimer: boolean;
    /**
     * Whether the timer is in hour12 format
     */
    hour12Timer: boolean;
    /**
     * Hours to change per step
     */
    stepHour: number;
    /**
     * Minutes to change per step
     */
    stepMinute: number;
    /**
     * Seconds to change per step
     */
    stepSecond: number;
    get hourValue(): number;
    /**
     * The value would be displayed in hourBox.
     * We need this because the value displayed in hourBox it not
     * the same as the hourValue when the timer is in hour12Timer mode.
     * */
    get hourBoxValue(): number;
    get minuteValue(): number;
    get secondValue(): number;
    get upHourButtonLabel(): string;
    get downHourButtonLabel(): string;
    get upMinuteButtonLabel(): string;
    get downMinuteButtonLabel(): string;
    get upSecondButtonLabel(): string;
    get downSecondButtonLabel(): string;
    get hour12ButtonLabel(): string;
    selectedChange: EventEmitter<T>;
    get owlDTTimerClass(): boolean;
    get owlDTTimeTabIndex(): number;
    constructor(ngZone: NgZone, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, cdRef: ChangeDetectorRef, dateTimeAdapter: DateTimeAdapter<T>);
    ngOnInit(): void;
    /**
     * Focus to the host element
     * */
    focus(): void;
    /**
     * Set the hour value via typing into timer box input
     * We need this to handle the hour value when the timer is in hour12 mode
     * */
    setHourValueViaInput(hours: number): void;
    setHourValue(hours: number): void;
    setMinuteValue(minutes: number): void;
    setSecondValue(seconds: number): void;
    setMeridiem(event: any): void;
    /**
     * Check if the up hour button is enabled
     */
    upHourEnabled(): boolean;
    /**
     * Check if the down hour button is enabled
     */
    downHourEnabled(): boolean;
    /**
     * Check if the up minute button is enabled
     */
    upMinuteEnabled(): boolean;
    /**
     * Check if the down minute button is enabled
     */
    downMinuteEnabled(): boolean;
    /**
     * Check if the up second button is enabled
     */
    upSecondEnabled(): boolean;
    /**
     * Check if the down second button is enabled
     */
    downSecondEnabled(): boolean;
    /**
     * PickerMoment's hour value +/- certain amount and compare it to the give date
     * 1 is after the comparedDate
     * -1 is before the comparedDate
     * 0 is equal the comparedDate
     * */
    private compareHours;
    /**
     * PickerMoment's minute value +/- certain amount and compare it to the give date
     * 1 is after the comparedDate
     * -1 is before the comparedDate
     * 0 is equal the comparedDate
     * */
    private compareMinutes;
    /**
     * PickerMoment's second value +/- certain amount and compare it to the give date
     * 1 is after the comparedDate
     * -1 is before the comparedDate
     * 0 is equal the comparedDate
     * */
    private compareSeconds;
    /**
     * Get a valid date object
     */
    private getValidDate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<OwlTimerComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<OwlTimerComponent<any>, "owl-date-time-timer", ["owlDateTimeTimer"], {
    "stepHour": "stepHour";
    "stepMinute": "stepMinute";
    "stepSecond": "stepSecond";
    "pickerMoment": "pickerMoment";
    "minDateTime": "minDateTime";
    "maxDateTime": "maxDateTime";
    "showSecondsTimer": "showSecondsTimer";
    "hour12Timer": "hour12Timer";
}, {
    "selectedChange": "selectedChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogdGltZXIuY29tcG9uZW50XG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPd2xEYXRlVGltZUludGwgfSBmcm9tICcuL2RhdGUtdGltZS1waWNrZXItaW50bC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVUaW1lQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlci9kYXRlLXRpbWUtYWRhcHRlci5jbGFzcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBPd2xUaW1lckNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBlbG1SZWY7XG4gICAgcHJpdmF0ZSBwaWNrZXJJbnRsO1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgcHJpdmF0ZSBkYXRlVGltZUFkYXB0ZXI7XG4gICAgLyoqIFRoZSBjdXJyZW50IHBpY2tlciBtb21lbnQgKi9cbiAgICBwcml2YXRlIF9waWNrZXJNb21lbnQ7XG4gICAgZ2V0IHBpY2tlck1vbWVudCgpOiBUO1xuICAgIHNldCBwaWNrZXJNb21lbnQodmFsdWU6IFQpO1xuICAgIC8qKiBUaGUgbWluaW11bSBzZWxlY3RhYmxlIGRhdGUgdGltZS4gKi9cbiAgICBwcml2YXRlIF9taW5EYXRlVGltZTtcbiAgICBnZXQgbWluRGF0ZVRpbWUoKTogVCB8IG51bGw7XG4gICAgc2V0IG1pbkRhdGVUaW1lKHZhbHVlOiBUIHwgbnVsbCk7XG4gICAgLyoqIFRoZSBtYXhpbXVtIHNlbGVjdGFibGUgZGF0ZSB0aW1lLiAqL1xuICAgIHByaXZhdGUgX21heERhdGVUaW1lO1xuICAgIGdldCBtYXhEYXRlVGltZSgpOiBUIHwgbnVsbDtcbiAgICBzZXQgbWF4RGF0ZVRpbWUodmFsdWU6IFQgfCBudWxsKTtcbiAgICBwcml2YXRlIGlzUE07XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzaG93IHRoZSBzZWNvbmQncyB0aW1lclxuICAgICAqL1xuICAgIHNob3dTZWNvbmRzVGltZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgdGltZXIgaXMgaW4gaG91cjEyIGZvcm1hdFxuICAgICAqL1xuICAgIGhvdXIxMlRpbWVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEhvdXJzIHRvIGNoYW5nZSBwZXIgc3RlcFxuICAgICAqL1xuICAgIHN0ZXBIb3VyOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogTWludXRlcyB0byBjaGFuZ2UgcGVyIHN0ZXBcbiAgICAgKi9cbiAgICBzdGVwTWludXRlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2Vjb25kcyB0byBjaGFuZ2UgcGVyIHN0ZXBcbiAgICAgKi9cbiAgICBzdGVwU2Vjb25kOiBudW1iZXI7XG4gICAgZ2V0IGhvdXJWYWx1ZSgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHdvdWxkIGJlIGRpc3BsYXllZCBpbiBob3VyQm94LlxuICAgICAqIFdlIG5lZWQgdGhpcyBiZWNhdXNlIHRoZSB2YWx1ZSBkaXNwbGF5ZWQgaW4gaG91ckJveCBpdCBub3RcbiAgICAgKiB0aGUgc2FtZSBhcyB0aGUgaG91clZhbHVlIHdoZW4gdGhlIHRpbWVyIGlzIGluIGhvdXIxMlRpbWVyIG1vZGUuXG4gICAgICogKi9cbiAgICBnZXQgaG91ckJveFZhbHVlKCk6IG51bWJlcjtcbiAgICBnZXQgbWludXRlVmFsdWUoKTogbnVtYmVyO1xuICAgIGdldCBzZWNvbmRWYWx1ZSgpOiBudW1iZXI7XG4gICAgZ2V0IHVwSG91ckJ1dHRvbkxhYmVsKCk6IHN0cmluZztcbiAgICBnZXQgZG93bkhvdXJCdXR0b25MYWJlbCgpOiBzdHJpbmc7XG4gICAgZ2V0IHVwTWludXRlQnV0dG9uTGFiZWwoKTogc3RyaW5nO1xuICAgIGdldCBkb3duTWludXRlQnV0dG9uTGFiZWwoKTogc3RyaW5nO1xuICAgIGdldCB1cFNlY29uZEJ1dHRvbkxhYmVsKCk6IHN0cmluZztcbiAgICBnZXQgZG93blNlY29uZEJ1dHRvbkxhYmVsKCk6IHN0cmluZztcbiAgICBnZXQgaG91cjEyQnV0dG9uTGFiZWwoKTogc3RyaW5nO1xuICAgIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgZ2V0IG93bERUVGltZXJDbGFzcygpOiBib29sZWFuO1xuICAgIGdldCBvd2xEVFRpbWVUYWJJbmRleCgpOiBudW1iZXI7XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIGVsbVJlZjogRWxlbWVudFJlZiwgcGlja2VySW50bDogT3dsRGF0ZVRpbWVJbnRsLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGRhdGVUaW1lQWRhcHRlcjogRGF0ZVRpbWVBZGFwdGVyPFQ+KTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvY3VzIHRvIHRoZSBob3N0IGVsZW1lbnRcbiAgICAgKiAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBob3VyIHZhbHVlIHZpYSB0eXBpbmcgaW50byB0aW1lciBib3ggaW5wdXRcbiAgICAgKiBXZSBuZWVkIHRoaXMgdG8gaGFuZGxlIHRoZSBob3VyIHZhbHVlIHdoZW4gdGhlIHRpbWVyIGlzIGluIGhvdXIxMiBtb2RlXG4gICAgICogKi9cbiAgICBzZXRIb3VyVmFsdWVWaWFJbnB1dChob3VyczogbnVtYmVyKTogdm9pZDtcbiAgICBzZXRIb3VyVmFsdWUoaG91cnM6IG51bWJlcik6IHZvaWQ7XG4gICAgc2V0TWludXRlVmFsdWUobWludXRlczogbnVtYmVyKTogdm9pZDtcbiAgICBzZXRTZWNvbmRWYWx1ZShzZWNvbmRzOiBudW1iZXIpOiB2b2lkO1xuICAgIHNldE1lcmlkaWVtKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSB1cCBob3VyIGJ1dHRvbiBpcyBlbmFibGVkXG4gICAgICovXG4gICAgdXBIb3VyRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoZSBkb3duIGhvdXIgYnV0dG9uIGlzIGVuYWJsZWRcbiAgICAgKi9cbiAgICBkb3duSG91ckVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdXAgbWludXRlIGJ1dHRvbiBpcyBlbmFibGVkXG4gICAgICovXG4gICAgdXBNaW51dGVFbmFibGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGRvd24gbWludXRlIGJ1dHRvbiBpcyBlbmFibGVkXG4gICAgICovXG4gICAgZG93bk1pbnV0ZUVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgdXAgc2Vjb25kIGJ1dHRvbiBpcyBlbmFibGVkXG4gICAgICovXG4gICAgdXBTZWNvbmRFbmFibGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGRvd24gc2Vjb25kIGJ1dHRvbiBpcyBlbmFibGVkXG4gICAgICovXG4gICAgZG93blNlY29uZEVuYWJsZWQoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBQaWNrZXJNb21lbnQncyBob3VyIHZhbHVlICsvLSBjZXJ0YWluIGFtb3VudCBhbmQgY29tcGFyZSBpdCB0byB0aGUgZ2l2ZSBkYXRlXG4gICAgICogMSBpcyBhZnRlciB0aGUgY29tcGFyZWREYXRlXG4gICAgICogLTEgaXMgYmVmb3JlIHRoZSBjb21wYXJlZERhdGVcbiAgICAgKiAwIGlzIGVxdWFsIHRoZSBjb21wYXJlZERhdGVcbiAgICAgKiAqL1xuICAgIHByaXZhdGUgY29tcGFyZUhvdXJzO1xuICAgIC8qKlxuICAgICAqIFBpY2tlck1vbWVudCdzIG1pbnV0ZSB2YWx1ZSArLy0gY2VydGFpbiBhbW91bnQgYW5kIGNvbXBhcmUgaXQgdG8gdGhlIGdpdmUgZGF0ZVxuICAgICAqIDEgaXMgYWZ0ZXIgdGhlIGNvbXBhcmVkRGF0ZVxuICAgICAqIC0xIGlzIGJlZm9yZSB0aGUgY29tcGFyZWREYXRlXG4gICAgICogMCBpcyBlcXVhbCB0aGUgY29tcGFyZWREYXRlXG4gICAgICogKi9cbiAgICBwcml2YXRlIGNvbXBhcmVNaW51dGVzO1xuICAgIC8qKlxuICAgICAqIFBpY2tlck1vbWVudCdzIHNlY29uZCB2YWx1ZSArLy0gY2VydGFpbiBhbW91bnQgYW5kIGNvbXBhcmUgaXQgdG8gdGhlIGdpdmUgZGF0ZVxuICAgICAqIDEgaXMgYWZ0ZXIgdGhlIGNvbXBhcmVkRGF0ZVxuICAgICAqIC0xIGlzIGJlZm9yZSB0aGUgY29tcGFyZWREYXRlXG4gICAgICogMCBpcyBlcXVhbCB0aGUgY29tcGFyZWREYXRlXG4gICAgICogKi9cbiAgICBwcml2YXRlIGNvbXBhcmVTZWNvbmRzO1xuICAgIC8qKlxuICAgICAqIEdldCBhIHZhbGlkIGRhdGUgb2JqZWN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRWYWxpZERhdGU7XG59XG4iXX0=