import { EventEmitter, QueryList, ElementRef } from '@angular/core';
import { NgxDropzoneService } from '../ngx-dropzone.service';
import { NgxDropzonePreviewComponent } from '../ngx-dropzone-preview/ngx-dropzone-preview.component';
import * as ɵngcc0 from '@angular/core';
export interface NgxDropzoneChangeEvent {
    source: NgxDropzoneComponent;
    addedFiles: File[];
    rejectedFiles: File[];
}
export declare class NgxDropzoneComponent {
    private service;
    constructor(service: NgxDropzoneService);
    /** A list of the content-projected preview children. */
    _previewChildren: QueryList<NgxDropzonePreviewComponent>;
    readonly _hasPreviews: boolean;
    /** A template reference to the native file input element. */
    _fileInput: ElementRef;
    /** Emitted when any files were added or rejected. */
    readonly change: EventEmitter<NgxDropzoneChangeEvent>;
    /** Set the accepted file types. Defaults to '*'. */
    accept: string;
    /** Disable any user interaction with the component. */
    disabled: boolean;
    private _disabled;
    /** Allow the selection of multiple files. */
    multiple: boolean;
    private _multiple;
    /** Set the maximum size a single file may have. */
    maxFileSize: number;
    private _maxFileSize;
    /** Allow the dropzone container to expand vertically. */
    expandable: boolean;
    private _expandable;
    /** Open the file selector on click. */
    disableClick: boolean;
    private _disableClick;
    /** Expose the id, aria-label, aria-labelledby and aria-describedby of the native file input for proper accessibility. */
    id: string;
    ariaLabel: string;
    ariaLabelledby: string;
    ariaDescribedBy: string;
    _isHovered: boolean;
    /** Show the native OS file explorer to select files. */
    _onClick(): void;
    _onDragOver(event: any): void;
    _onDragLeave(): void;
    _onDrop(event: any): void;
    showFileSelector(): void;
    _onFilesSelected(event: any): void;
    private handleFileDrop;
    private preventDefault;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxDropzoneComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxDropzoneComponent, "ngx-dropzone, [ngx-dropzone]", never, {
    "accept": "accept";
    "disabled": "disabled";
    "multiple": "multiple";
    "maxFileSize": "maxFileSize";
    "expandable": "expandable";
    "disableClick": "disableClick";
    "id": "id";
    "ariaLabel": "aria-label";
    "ariaLabelledby": "aria-labelledby";
    "ariaDescribedBy": "aria-describedby";
}, {
    "change": "change";
}, ["_previewChildren"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRyb3B6b25lLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3gtZHJvcHpvbmUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4RHJvcHpvbmVTZXJ2aWNlIH0gZnJvbSAnLi4vbmd4LWRyb3B6b25lLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmd4RHJvcHpvbmVQcmV2aWV3Q29tcG9uZW50IH0gZnJvbSAnLi4vbmd4LWRyb3B6b25lLXByZXZpZXcvbmd4LWRyb3B6b25lLXByZXZpZXcuY29tcG9uZW50JztcbmV4cG9ydCBpbnRlcmZhY2UgTmd4RHJvcHpvbmVDaGFuZ2VFdmVudCB7XG4gICAgc291cmNlOiBOZ3hEcm9wem9uZUNvbXBvbmVudDtcbiAgICBhZGRlZEZpbGVzOiBGaWxlW107XG4gICAgcmVqZWN0ZWRGaWxlczogRmlsZVtdO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4RHJvcHpvbmVDb21wb25lbnQge1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlOiBOZ3hEcm9wem9uZVNlcnZpY2UpO1xuICAgIC8qKiBBIGxpc3Qgb2YgdGhlIGNvbnRlbnQtcHJvamVjdGVkIHByZXZpZXcgY2hpbGRyZW4uICovXG4gICAgX3ByZXZpZXdDaGlsZHJlbjogUXVlcnlMaXN0PE5neERyb3B6b25lUHJldmlld0NvbXBvbmVudD47XG4gICAgcmVhZG9ubHkgX2hhc1ByZXZpZXdzOiBib29sZWFuO1xuICAgIC8qKiBBIHRlbXBsYXRlIHJlZmVyZW5jZSB0byB0aGUgbmF0aXZlIGZpbGUgaW5wdXQgZWxlbWVudC4gKi9cbiAgICBfZmlsZUlucHV0OiBFbGVtZW50UmVmO1xuICAgIC8qKiBFbWl0dGVkIHdoZW4gYW55IGZpbGVzIHdlcmUgYWRkZWQgb3IgcmVqZWN0ZWQuICovXG4gICAgcmVhZG9ubHkgY2hhbmdlOiBFdmVudEVtaXR0ZXI8Tmd4RHJvcHpvbmVDaGFuZ2VFdmVudD47XG4gICAgLyoqIFNldCB0aGUgYWNjZXB0ZWQgZmlsZSB0eXBlcy4gRGVmYXVsdHMgdG8gJyonLiAqL1xuICAgIGFjY2VwdDogc3RyaW5nO1xuICAgIC8qKiBEaXNhYmxlIGFueSB1c2VyIGludGVyYWN0aW9uIHdpdGggdGhlIGNvbXBvbmVudC4gKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9kaXNhYmxlZDtcbiAgICAvKiogQWxsb3cgdGhlIHNlbGVjdGlvbiBvZiBtdWx0aXBsZSBmaWxlcy4gKi9cbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9tdWx0aXBsZTtcbiAgICAvKiogU2V0IHRoZSBtYXhpbXVtIHNpemUgYSBzaW5nbGUgZmlsZSBtYXkgaGF2ZS4gKi9cbiAgICBtYXhGaWxlU2l6ZTogbnVtYmVyO1xuICAgIHByaXZhdGUgX21heEZpbGVTaXplO1xuICAgIC8qKiBBbGxvdyB0aGUgZHJvcHpvbmUgY29udGFpbmVyIHRvIGV4cGFuZCB2ZXJ0aWNhbGx5LiAqL1xuICAgIGV4cGFuZGFibGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZXhwYW5kYWJsZTtcbiAgICAvKiogT3BlbiB0aGUgZmlsZSBzZWxlY3RvciBvbiBjbGljay4gKi9cbiAgICBkaXNhYmxlQ2xpY2s6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGlzYWJsZUNsaWNrO1xuICAgIC8qKiBFeHBvc2UgdGhlIGlkLCBhcmlhLWxhYmVsLCBhcmlhLWxhYmVsbGVkYnkgYW5kIGFyaWEtZGVzY3JpYmVkYnkgb2YgdGhlIG5hdGl2ZSBmaWxlIGlucHV0IGZvciBwcm9wZXIgYWNjZXNzaWJpbGl0eS4gKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xuICAgIGFyaWFMYWJlbGxlZGJ5OiBzdHJpbmc7XG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzdHJpbmc7XG4gICAgX2lzSG92ZXJlZDogYm9vbGVhbjtcbiAgICAvKiogU2hvdyB0aGUgbmF0aXZlIE9TIGZpbGUgZXhwbG9yZXIgdG8gc2VsZWN0IGZpbGVzLiAqL1xuICAgIF9vbkNsaWNrKCk6IHZvaWQ7XG4gICAgX29uRHJhZ092ZXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgX29uRHJhZ0xlYXZlKCk6IHZvaWQ7XG4gICAgX29uRHJvcChldmVudDogYW55KTogdm9pZDtcbiAgICBzaG93RmlsZVNlbGVjdG9yKCk6IHZvaWQ7XG4gICAgX29uRmlsZXNTZWxlY3RlZChldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGhhbmRsZUZpbGVEcm9wO1xuICAgIHByaXZhdGUgcHJldmVudERlZmF1bHQ7XG59XG4iXX0=