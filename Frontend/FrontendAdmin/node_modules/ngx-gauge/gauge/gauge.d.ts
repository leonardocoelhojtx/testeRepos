import { SimpleChanges, Renderer2, AfterViewInit, ElementRef, OnChanges, OnDestroy } from '@angular/core';
import { NgxGaugeLabel, NgxGaugeValue, NgxGaugePrepend, NgxGaugeAppend } from './gauge-directives';
import * as ɵngcc0 from '@angular/core';
export declare type NgxGaugeType = 'full' | 'arch' | 'semi';
export declare type NgxGaugeCap = 'round' | 'butt';
export declare class NgxGauge implements AfterViewInit, OnChanges, OnDestroy {
    private _elementRef;
    private _renderer;
    _canvas: ElementRef;
    _label: ElementRef;
    _reading: ElementRef;
    _labelChild: NgxGaugeLabel;
    _prependChild: NgxGaugePrepend;
    _appendChild: NgxGaugeAppend;
    _valueDisplayChild: NgxGaugeValue;
    private _size;
    private _min;
    private _max;
    private _animate;
    private _initialized;
    private _context;
    private _animationRequestID;
    ariaLabel: string;
    ariaLabelledby: string | null;
    get size(): number;
    set size(value: number);
    get min(): number;
    set min(value: number);
    get animate(): boolean;
    set animate(value: boolean);
    get max(): number;
    set max(value: number);
    type: NgxGaugeType;
    cap: NgxGaugeCap;
    thick: number;
    label: string;
    append: string;
    prepend: string;
    foregroundColor: string;
    backgroundColor: string;
    thresholds: Object;
    private _value;
    get value(): number;
    set value(val: number);
    duration: number;
    constructor(_elementRef: ElementRef, _renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    private _updateSize;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private _getBounds;
    private _drawShell;
    private _clear;
    private _getWidth;
    private _getHeight;
    private _getCanvasHeight;
    private _getRadius;
    private _getCenter;
    private _init;
    private _destroy;
    private _setupStyles;
    private _getForegroundColorByRange;
    private _create;
    private _update;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxGauge>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxGauge, "ngx-gauge", never, {
    "ariaLabel": "aria-label";
    "ariaLabelledby": "aria-labelledby";
    "type": "type";
    "cap": "cap";
    "thick": "thick";
    "foregroundColor": "foregroundColor";
    "backgroundColor": "backgroundColor";
    "thresholds": "thresholds";
    "duration": "duration";
    "size": "size";
    "min": "min";
    "animate": "animate";
    "max": "max";
    "value": "value";
    "label": "label";
    "append": "append";
    "prepend": "prepend";
}, {}, ["_labelChild", "_prependChild", "_appendChild", "_valueDisplayChild"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F1Z2UuZC50cyIsInNvdXJjZXMiOlsiZ2F1Z2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTZEQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4R2F1Z2VMYWJlbCwgTmd4R2F1Z2VWYWx1ZSwgTmd4R2F1Z2VQcmVwZW5kLCBOZ3hHYXVnZUFwcGVuZCB9IGZyb20gJy4vZ2F1Z2UtZGlyZWN0aXZlcyc7XHJcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTmd4R2F1Z2VUeXBlID0gJ2Z1bGwnIHwgJ2FyY2gnIHwgJ3NlbWknO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIE5neEdhdWdlQ2FwID0gJ3JvdW5kJyB8ICdidXR0JztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4R2F1Z2UgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XHJcbiAgICBfY2FudmFzOiBFbGVtZW50UmVmO1xyXG4gICAgX2xhYmVsOiBFbGVtZW50UmVmO1xyXG4gICAgX3JlYWRpbmc6IEVsZW1lbnRSZWY7XHJcbiAgICBfbGFiZWxDaGlsZDogTmd4R2F1Z2VMYWJlbDtcclxuICAgIF9wcmVwZW5kQ2hpbGQ6IE5neEdhdWdlUHJlcGVuZDtcclxuICAgIF9hcHBlbmRDaGlsZDogTmd4R2F1Z2VBcHBlbmQ7XHJcbiAgICBfdmFsdWVEaXNwbGF5Q2hpbGQ6IE5neEdhdWdlVmFsdWU7XHJcbiAgICBwcml2YXRlIF9zaXplO1xyXG4gICAgcHJpdmF0ZSBfbWluO1xyXG4gICAgcHJpdmF0ZSBfbWF4O1xyXG4gICAgcHJpdmF0ZSBfYW5pbWF0ZTtcclxuICAgIHByaXZhdGUgX2luaXRpYWxpemVkO1xyXG4gICAgcHJpdmF0ZSBfY29udGV4dDtcclxuICAgIHByaXZhdGUgX2FuaW1hdGlvblJlcXVlc3RJRDtcclxuICAgIGFyaWFMYWJlbDogc3RyaW5nO1xyXG4gICAgYXJpYUxhYmVsbGVkYnk6IHN0cmluZyB8IG51bGw7XHJcbiAgICBnZXQgc2l6ZSgpOiBudW1iZXI7XHJcbiAgICBzZXQgc2l6ZSh2YWx1ZTogbnVtYmVyKTtcclxuICAgIGdldCBtaW4oKTogbnVtYmVyO1xyXG4gICAgc2V0IG1pbih2YWx1ZTogbnVtYmVyKTtcclxuICAgIGdldCBhbmltYXRlKCk6IGJvb2xlYW47XHJcbiAgICBzZXQgYW5pbWF0ZSh2YWx1ZTogYm9vbGVhbik7XHJcbiAgICBnZXQgbWF4KCk6IG51bWJlcjtcclxuICAgIHNldCBtYXgodmFsdWU6IG51bWJlcik7XHJcbiAgICB0eXBlOiBOZ3hHYXVnZVR5cGU7XHJcbiAgICBjYXA6IE5neEdhdWdlQ2FwO1xyXG4gICAgdGhpY2s6IG51bWJlcjtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBhcHBlbmQ6IHN0cmluZztcclxuICAgIHByZXBlbmQ6IHN0cmluZztcclxuICAgIGZvcmVncm91bmRDb2xvcjogc3RyaW5nO1xyXG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XHJcbiAgICB0aHJlc2hvbGRzOiBPYmplY3Q7XHJcbiAgICBwcml2YXRlIF92YWx1ZTtcclxuICAgIGdldCB2YWx1ZSgpOiBudW1iZXI7XHJcbiAgICBzZXQgdmFsdWUodmFsOiBudW1iZXIpO1xyXG4gICAgZHVyYXRpb246IG51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMik7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIHByaXZhdGUgX3VwZGF0ZVNpemU7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9nZXRCb3VuZHM7XHJcbiAgICBwcml2YXRlIF9kcmF3U2hlbGw7XHJcbiAgICBwcml2YXRlIF9jbGVhcjtcclxuICAgIHByaXZhdGUgX2dldFdpZHRoO1xyXG4gICAgcHJpdmF0ZSBfZ2V0SGVpZ2h0O1xyXG4gICAgcHJpdmF0ZSBfZ2V0Q2FudmFzSGVpZ2h0O1xyXG4gICAgcHJpdmF0ZSBfZ2V0UmFkaXVzO1xyXG4gICAgcHJpdmF0ZSBfZ2V0Q2VudGVyO1xyXG4gICAgcHJpdmF0ZSBfaW5pdDtcclxuICAgIHByaXZhdGUgX2Rlc3Ryb3k7XHJcbiAgICBwcml2YXRlIF9zZXR1cFN0eWxlcztcclxuICAgIHByaXZhdGUgX2dldEZvcmVncm91bmRDb2xvckJ5UmFuZ2U7XHJcbiAgICBwcml2YXRlIF9jcmVhdGU7XHJcbiAgICBwcml2YXRlIF91cGRhdGU7XHJcbn1cclxuIl19