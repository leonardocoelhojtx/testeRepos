import { IConfig } from './config';
import * as ɵngcc0 from '@angular/core';
export declare class MaskApplierService {
    protected _config: IConfig;
    dropSpecialCharacters: IConfig['dropSpecialCharacters'];
    hiddenInput: IConfig['hiddenInput'];
    showTemplate: IConfig['showTemplate'];
    clearIfNotMatch: IConfig['clearIfNotMatch'];
    maskExpression: string;
    actualValue: string;
    shownMaskExpression: string;
    maskSpecialCharacters: IConfig['specialCharacters'];
    maskAvailablePatterns: IConfig['patterns'];
    prefix: IConfig['prefix'];
    suffix: IConfig['suffix'];
    thousandSeparator: IConfig['thousandSeparator'];
    decimalMarker: IConfig['decimalMarker'];
    customPattern: IConfig['patterns'];
    ipError?: boolean;
    cpfCnpjError?: boolean;
    showMaskTyped: IConfig['showMaskTyped'];
    placeHolderCharacter: IConfig['placeHolderCharacter'];
    validation: IConfig['validation'];
    separatorLimit: IConfig['separatorLimit'];
    allowNegativeNumbers: IConfig['allowNegativeNumbers'];
    leadZeroDateTime: IConfig['leadZeroDateTime'];
    private _shift;
    constructor(_config: IConfig);
    applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string;
    applyMask(inputValue: string, maskExpression: string, position?: number, justPasted?: boolean, backspaced?: boolean, cb?: Function): string;
    _findSpecialChar(inputSymbol: string): undefined | string;
    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean;
    private _formatWithSeparators;
    private percentage;
    private getPrecision;
    private checkAndRemoveSuffix;
    private checkInputPrecision;
    private _stripToDecimal;
    private _charToRegExpExpression;
    private _shiftStep;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MaskApplierService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MaskApplierService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay1hcHBsaWVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibWFzay1hcHBsaWVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXNrQXBwbGllclNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBfY29uZmlnOiBJQ29uZmlnO1xuICAgIGRyb3BTcGVjaWFsQ2hhcmFjdGVyczogSUNvbmZpZ1snZHJvcFNwZWNpYWxDaGFyYWN0ZXJzJ107XG4gICAgaGlkZGVuSW5wdXQ6IElDb25maWdbJ2hpZGRlbklucHV0J107XG4gICAgc2hvd1RlbXBsYXRlOiBJQ29uZmlnWydzaG93VGVtcGxhdGUnXTtcbiAgICBjbGVhcklmTm90TWF0Y2g6IElDb25maWdbJ2NsZWFySWZOb3RNYXRjaCddO1xuICAgIG1hc2tFeHByZXNzaW9uOiBzdHJpbmc7XG4gICAgYWN0dWFsVmFsdWU6IHN0cmluZztcbiAgICBzaG93bk1hc2tFeHByZXNzaW9uOiBzdHJpbmc7XG4gICAgbWFza1NwZWNpYWxDaGFyYWN0ZXJzOiBJQ29uZmlnWydzcGVjaWFsQ2hhcmFjdGVycyddO1xuICAgIG1hc2tBdmFpbGFibGVQYXR0ZXJuczogSUNvbmZpZ1sncGF0dGVybnMnXTtcbiAgICBwcmVmaXg6IElDb25maWdbJ3ByZWZpeCddO1xuICAgIHN1ZmZpeDogSUNvbmZpZ1snc3VmZml4J107XG4gICAgdGhvdXNhbmRTZXBhcmF0b3I6IElDb25maWdbJ3Rob3VzYW5kU2VwYXJhdG9yJ107XG4gICAgZGVjaW1hbE1hcmtlcjogSUNvbmZpZ1snZGVjaW1hbE1hcmtlciddO1xuICAgIGN1c3RvbVBhdHRlcm46IElDb25maWdbJ3BhdHRlcm5zJ107XG4gICAgaXBFcnJvcj86IGJvb2xlYW47XG4gICAgY3BmQ25wakVycm9yPzogYm9vbGVhbjtcbiAgICBzaG93TWFza1R5cGVkOiBJQ29uZmlnWydzaG93TWFza1R5cGVkJ107XG4gICAgcGxhY2VIb2xkZXJDaGFyYWN0ZXI6IElDb25maWdbJ3BsYWNlSG9sZGVyQ2hhcmFjdGVyJ107XG4gICAgdmFsaWRhdGlvbjogSUNvbmZpZ1sndmFsaWRhdGlvbiddO1xuICAgIHNlcGFyYXRvckxpbWl0OiBJQ29uZmlnWydzZXBhcmF0b3JMaW1pdCddO1xuICAgIGFsbG93TmVnYXRpdmVOdW1iZXJzOiBJQ29uZmlnWydhbGxvd05lZ2F0aXZlTnVtYmVycyddO1xuICAgIGxlYWRaZXJvRGF0ZVRpbWU6IElDb25maWdbJ2xlYWRaZXJvRGF0ZVRpbWUnXTtcbiAgICBwcml2YXRlIF9zaGlmdDtcbiAgICBjb25zdHJ1Y3RvcihfY29uZmlnOiBJQ29uZmlnKTtcbiAgICBhcHBseU1hc2tXaXRoUGF0dGVybihpbnB1dFZhbHVlOiBzdHJpbmcsIG1hc2tBbmRQYXR0ZXJuOiBbc3RyaW5nLCBJQ29uZmlnWydwYXR0ZXJucyddXSk6IHN0cmluZztcbiAgICBhcHBseU1hc2soaW5wdXRWYWx1ZTogc3RyaW5nLCBtYXNrRXhwcmVzc2lvbjogc3RyaW5nLCBwb3NpdGlvbj86IG51bWJlciwganVzdFBhc3RlZD86IGJvb2xlYW4sIGJhY2tzcGFjZWQ/OiBib29sZWFuLCBjYj86IEZ1bmN0aW9uKTogc3RyaW5nO1xuICAgIF9maW5kU3BlY2lhbENoYXIoaW5wdXRTeW1ib2w6IHN0cmluZyk6IHVuZGVmaW5lZCB8IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgX2NoZWNrU3ltYm9sTWFzayhpbnB1dFN5bWJvbDogc3RyaW5nLCBtYXNrU3ltYm9sOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIHByaXZhdGUgX2Zvcm1hdFdpdGhTZXBhcmF0b3JzO1xuICAgIHByaXZhdGUgcGVyY2VudGFnZTtcbiAgICBwcml2YXRlIGdldFByZWNpc2lvbjtcbiAgICBwcml2YXRlIGNoZWNrQW5kUmVtb3ZlU3VmZml4O1xuICAgIHByaXZhdGUgY2hlY2tJbnB1dFByZWNpc2lvbjtcbiAgICBwcml2YXRlIF9zdHJpcFRvRGVjaW1hbDtcbiAgICBwcml2YXRlIF9jaGFyVG9SZWdFeHBFeHByZXNzaW9uO1xuICAgIHByaXZhdGUgX3NoaWZ0U3RlcDtcbn1cbiJdfQ==