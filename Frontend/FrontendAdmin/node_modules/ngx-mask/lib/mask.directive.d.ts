import { ControlValueAccessor, FormControl, ValidationErrors, Validator } from '@angular/forms';
import { OnChanges, SimpleChanges } from '@angular/core';
import { CustomKeyboardEvent } from './custom-keyboard-event';
import { IConfig } from './config';
import { MaskService } from './mask.service';
import * as ɵngcc0 from '@angular/core';
export declare class MaskDirective implements ControlValueAccessor, OnChanges, Validator {
    private document;
    private _maskService;
    protected _config: IConfig;
    maskExpression: string;
    specialCharacters: IConfig['specialCharacters'];
    patterns: IConfig['patterns'];
    prefix: IConfig['prefix'];
    suffix: IConfig['suffix'];
    thousandSeparator: IConfig['thousandSeparator'];
    decimalMarker: IConfig['decimalMarker'];
    dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null;
    hiddenInput: IConfig['hiddenInput'] | null;
    showMaskTyped: IConfig['showMaskTyped'] | null;
    placeHolderCharacter: IConfig['placeHolderCharacter'] | null;
    shownMaskExpression: IConfig['shownMaskExpression'] | null;
    showTemplate: IConfig['showTemplate'] | null;
    clearIfNotMatch: IConfig['clearIfNotMatch'] | null;
    validation: IConfig['validation'] | null;
    separatorLimit: IConfig['separatorLimit'] | null;
    allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null;
    leadZeroDateTime: IConfig['leadZeroDateTime'] | null;
    private _maskValue;
    private _inputValue;
    private _position;
    private _start;
    private _end;
    private _code;
    private _maskExpressionArray;
    private _justPasted;
    constructor(document: any, _maskService: MaskService, _config: IConfig);
    onChange: (_: any) => void;
    onTouch: () => void;
    ngOnChanges(changes: SimpleChanges): void;
    validate({ value }: FormControl): ValidationErrors | null;
    onPaste(): void;
    onInput(e: CustomKeyboardEvent): void;
    onBlur(): void;
    onFocus(e: MouseEvent | CustomKeyboardEvent): void;
    onKeyDown(e: CustomKeyboardEvent): void;
    /** It writes the value in the input */
    writeValue(inputValue: string | number | {
        value: string | number;
        disable?: boolean;
    }): Promise<void>;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    suffixCheckOnPressDelete(keyCode: number, el: HTMLInputElement): void;
    /** It disables the input element */
    setDisabledState(isDisabled: boolean): void;
    private _repeatPatternSymbols;
    private _applyMask;
    private _validateTime;
    private _getActualInputLength;
    private _createValidationError;
    private _setMask;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MaskDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MaskDirective, "input[mask], textarea[mask]", never, {
    "maskExpression": "mask";
    "specialCharacters": "specialCharacters";
    "patterns": "patterns";
    "prefix": "prefix";
    "suffix": "suffix";
    "thousandSeparator": "thousandSeparator";
    "decimalMarker": "decimalMarker";
    "dropSpecialCharacters": "dropSpecialCharacters";
    "hiddenInput": "hiddenInput";
    "showMaskTyped": "showMaskTyped";
    "placeHolderCharacter": "placeHolderCharacter";
    "shownMaskExpression": "shownMaskExpression";
    "showTemplate": "showTemplate";
    "clearIfNotMatch": "clearIfNotMatch";
    "validation": "validation";
    "separatorLimit": "separatorLimit";
    "allowNegativeNumbers": "allowNegativeNumbers";
    "leadZeroDateTime": "leadZeroDateTime";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsibWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Db250cm9sLCBWYWxpZGF0aW9uRXJyb3JzLCBWYWxpZGF0b3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEN1c3RvbUtleWJvYXJkRXZlbnQgfSBmcm9tICcuL2N1c3RvbS1rZXlib2FyZC1ldmVudCc7XG5pbXBvcnQgeyBJQ29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgTWFza1NlcnZpY2UgfSBmcm9tICcuL21hc2suc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcywgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIGRvY3VtZW50O1xuICAgIHByaXZhdGUgX21hc2tTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBfY29uZmlnOiBJQ29uZmlnO1xuICAgIG1hc2tFeHByZXNzaW9uOiBzdHJpbmc7XG4gICAgc3BlY2lhbENoYXJhY3RlcnM6IElDb25maWdbJ3NwZWNpYWxDaGFyYWN0ZXJzJ107XG4gICAgcGF0dGVybnM6IElDb25maWdbJ3BhdHRlcm5zJ107XG4gICAgcHJlZml4OiBJQ29uZmlnWydwcmVmaXgnXTtcbiAgICBzdWZmaXg6IElDb25maWdbJ3N1ZmZpeCddO1xuICAgIHRob3VzYW5kU2VwYXJhdG9yOiBJQ29uZmlnWyd0aG91c2FuZFNlcGFyYXRvciddO1xuICAgIGRlY2ltYWxNYXJrZXI6IElDb25maWdbJ2RlY2ltYWxNYXJrZXInXTtcbiAgICBkcm9wU3BlY2lhbENoYXJhY3RlcnM6IElDb25maWdbJ2Ryb3BTcGVjaWFsQ2hhcmFjdGVycyddIHwgbnVsbDtcbiAgICBoaWRkZW5JbnB1dDogSUNvbmZpZ1snaGlkZGVuSW5wdXQnXSB8IG51bGw7XG4gICAgc2hvd01hc2tUeXBlZDogSUNvbmZpZ1snc2hvd01hc2tUeXBlZCddIHwgbnVsbDtcbiAgICBwbGFjZUhvbGRlckNoYXJhY3RlcjogSUNvbmZpZ1sncGxhY2VIb2xkZXJDaGFyYWN0ZXInXSB8IG51bGw7XG4gICAgc2hvd25NYXNrRXhwcmVzc2lvbjogSUNvbmZpZ1snc2hvd25NYXNrRXhwcmVzc2lvbiddIHwgbnVsbDtcbiAgICBzaG93VGVtcGxhdGU6IElDb25maWdbJ3Nob3dUZW1wbGF0ZSddIHwgbnVsbDtcbiAgICBjbGVhcklmTm90TWF0Y2g6IElDb25maWdbJ2NsZWFySWZOb3RNYXRjaCddIHwgbnVsbDtcbiAgICB2YWxpZGF0aW9uOiBJQ29uZmlnWyd2YWxpZGF0aW9uJ10gfCBudWxsO1xuICAgIHNlcGFyYXRvckxpbWl0OiBJQ29uZmlnWydzZXBhcmF0b3JMaW1pdCddIHwgbnVsbDtcbiAgICBhbGxvd05lZ2F0aXZlTnVtYmVyczogSUNvbmZpZ1snYWxsb3dOZWdhdGl2ZU51bWJlcnMnXSB8IG51bGw7XG4gICAgbGVhZFplcm9EYXRlVGltZTogSUNvbmZpZ1snbGVhZFplcm9EYXRlVGltZSddIHwgbnVsbDtcbiAgICBwcml2YXRlIF9tYXNrVmFsdWU7XG4gICAgcHJpdmF0ZSBfaW5wdXRWYWx1ZTtcbiAgICBwcml2YXRlIF9wb3NpdGlvbjtcbiAgICBwcml2YXRlIF9zdGFydDtcbiAgICBwcml2YXRlIF9lbmQ7XG4gICAgcHJpdmF0ZSBfY29kZTtcbiAgICBwcml2YXRlIF9tYXNrRXhwcmVzc2lvbkFycmF5O1xuICAgIHByaXZhdGUgX2p1c3RQYXN0ZWQ7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IGFueSwgX21hc2tTZXJ2aWNlOiBNYXNrU2VydmljZSwgX2NvbmZpZzogSUNvbmZpZyk7XG4gICAgb25DaGFuZ2U6IChfOiBhbnkpID0+IHZvaWQ7XG4gICAgb25Ub3VjaDogKCkgPT4gdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICB2YWxpZGF0ZSh7IHZhbHVlIH06IEZvcm1Db250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGw7XG4gICAgb25QYXN0ZSgpOiB2b2lkO1xuICAgIG9uSW5wdXQoZTogQ3VzdG9tS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgb25Gb2N1cyhlOiBNb3VzZUV2ZW50IHwgQ3VzdG9tS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGU6IEN1c3RvbUtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKiBJdCB3cml0ZXMgdGhlIHZhbHVlIGluIHRoZSBpbnB1dCAqL1xuICAgIHdyaXRlVmFsdWUoaW5wdXRWYWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwge1xuICAgICAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuICAgICAgICBkaXNhYmxlPzogYm9vbGVhbjtcbiAgICB9KTogUHJvbWlzZTx2b2lkPjtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHN1ZmZpeENoZWNrT25QcmVzc0RlbGV0ZShrZXlDb2RlOiBudW1iZXIsIGVsOiBIVE1MSW5wdXRFbGVtZW50KTogdm9pZDtcbiAgICAvKiogSXQgZGlzYWJsZXMgdGhlIGlucHV0IGVsZW1lbnQgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByaXZhdGUgX3JlcGVhdFBhdHRlcm5TeW1ib2xzO1xuICAgIHByaXZhdGUgX2FwcGx5TWFzaztcbiAgICBwcml2YXRlIF92YWxpZGF0ZVRpbWU7XG4gICAgcHJpdmF0ZSBfZ2V0QWN0dWFsSW5wdXRMZW5ndGg7XG4gICAgcHJpdmF0ZSBfY3JlYXRlVmFsaWRhdGlvbkVycm9yO1xuICAgIHByaXZhdGUgX3NldE1hc2s7XG59XG4iXX0=