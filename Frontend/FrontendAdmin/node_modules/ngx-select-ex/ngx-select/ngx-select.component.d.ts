import { AfterContentChecked, DoCheck, ElementRef, EventEmitter, IterableDiffers, ChangeDetectorRef, InjectionToken, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { BehaviorSubject } from 'rxjs';
import { NgxSelectOption, TSelectOption } from './ngx-select.classes';
import { NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective } from './ngx-templates.directive';
import { INgxOptionNavigated, INgxSelectOption, INgxSelectOptions } from './ngx-select.interfaces';
import * as ɵngcc0 from '@angular/core';
export declare const NGX_SELECT_OPTIONS: InjectionToken<any>;
export interface INgxSelectComponentMouseEvent extends MouseEvent {
    clickedSelectComponent?: NgxSelectComponent;
}
export declare class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked, OnDestroy {
    private sanitizer;
    private cd;
    items: any[];
    optionValueField: string;
    optionTextField: string;
    optGroupLabelField: string;
    optGroupOptionsField: string;
    multiple: boolean;
    allowClear: boolean;
    placeholder: string;
    noAutoComplete: boolean;
    disabled: boolean;
    defaultValue: any[];
    autoSelectSingleOption: boolean;
    autoClearSearch: boolean;
    noResultsFound: string;
    keepSelectedItems: false;
    size: 'small' | 'default' | 'large';
    searchCallback: (search: string, item: INgxSelectOption) => boolean;
    autoActiveOnMouseEnter: boolean;
    showOptionNotFoundForEmptyItems: boolean;
    isFocused: boolean;
    keepSelectMenuOpened: boolean;
    autocomplete: string;
    dropDownMenuOtherClasses: string;
    keyCodeToRemoveSelected: string;
    keyCodeToOptionsOpen: string[];
    keyCodeToOptionsClose: string;
    keyCodeToOptionsSelect: string[];
    keyCodeToNavigateFirst: string;
    keyCodeToNavigatePrevious: string;
    keyCodeToNavigateNext: string;
    keyCodeToNavigateLast: string;
    typed: EventEmitter<string>;
    focus: EventEmitter<void>;
    blur: EventEmitter<void>;
    open: EventEmitter<void>;
    close: EventEmitter<void>;
    select: EventEmitter<any>;
    remove: EventEmitter<any>;
    navigated: EventEmitter<INgxOptionNavigated>;
    selectionChanges: EventEmitter<INgxSelectOption[]>;
    protected mainElRef: ElementRef;
    inputElRef: ElementRef;
    protected choiceMenuElRef: ElementRef;
    templateOption: NgxSelectOptionDirective;
    templateSelectedOption: NgxSelectOptionSelectedDirective;
    templateOptionNotFound: NgxSelectOptionNotFoundDirective;
    optionsOpened: boolean;
    optionsFiltered: TSelectOption[];
    private optionActive;
    private itemsDiffer;
    private defaultValueDiffer;
    private actualValue;
    subjOptions: BehaviorSubject<TSelectOption[]>;
    private subjSearchText;
    private subjOptionsSelected;
    private subjExternalValue;
    private subjDefaultValue;
    private subjRegisterOnChange;
    private cacheOptionsFilteredFlat;
    private cacheElementOffsetTop;
    private _focusToInput;
    /** @internal */
    get inputText(): any;
    constructor(iterableDiffers: IterableDiffers, sanitizer: DomSanitizer, cd: ChangeDetectorRef, defaultOptions: INgxSelectOptions);
    setFormControlSize(otherClassNames?: object, useFormControl?: boolean): ({
        'form-control-sm input-sm': boolean;
        'form-control-lg input-lg': boolean;
    } & object) | ({
        'form-control-sm input-sm'?: undefined;
        'form-control-lg input-lg'?: undefined;
    } & object);
    setBtnSize(): {
        'btn-sm': boolean;
        'btn-lg': boolean;
    };
    get optionsSelected(): NgxSelectOption[];
    mainClicked(event: INgxSelectComponentMouseEvent): void;
    documentClick(event: INgxSelectComponentMouseEvent): void;
    private optionsFilteredFlat;
    private navigateOption;
    ngDoCheck(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    canClearNotMultiple(): boolean;
    focusToInput(): void;
    inputKeyDown(event: KeyboardEvent): void;
    trackByOption(index: number, option: TSelectOption): string | number;
    checkInputVisibility(): boolean;
    /** @internal */
    inputKeyUp(value: string, event: KeyboardEvent): void;
    /** @internal */
    inputClick(value?: string): void;
    /** @internal */
    sanitize(html: string): SafeHtml;
    /** @internal */
    highlightOption(option: NgxSelectOption): SafeHtml;
    /** @internal */
    optionSelect(option: NgxSelectOption, event?: Event): void;
    /** @internal */
    optionRemove(option: NgxSelectOption, event: Event): void;
    /** @internal */
    optionActivate(navigated: INgxOptionNavigated): void;
    /** @internal */
    onMouseEnter(navigated: INgxOptionNavigated): void;
    private filterOptions;
    private ensureVisibleElement;
    showChoiceMenu(): boolean;
    optionsOpen(search?: string): void;
    optionsClose(): void;
    private buildOptions;
    private buildOption;
    onChange: (v: any) => any;
    onTouched: () => void;
    writeValue(obj: any): void;
    registerOnChange(fn: (_: any) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxSelectComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxSelectComponent, "ngx-select", never, {
    "optionValueField": "optionValueField";
    "optionTextField": "optionTextField";
    "optGroupLabelField": "optGroupLabelField";
    "optGroupOptionsField": "optGroupOptionsField";
    "multiple": "multiple";
    "allowClear": "allowClear";
    "placeholder": "placeholder";
    "noAutoComplete": "noAutoComplete";
    "disabled": "disabled";
    "defaultValue": "defaultValue";
    "autoSelectSingleOption": "autoSelectSingleOption";
    "autoClearSearch": "autoClearSearch";
    "noResultsFound": "noResultsFound";
    "size": "size";
    "autoActiveOnMouseEnter": "autoActiveOnMouseEnter";
    "showOptionNotFoundForEmptyItems": "showOptionNotFoundForEmptyItems";
    "isFocused": "isFocused";
    "keepSelectMenuOpened": "keepSelectMenuOpened";
    "autocomplete": "autocomplete";
    "dropDownMenuOtherClasses": "dropDownMenuOtherClasses";
    "items": "items";
    "keepSelectedItems": "keepSelectedItems";
    "searchCallback": "searchCallback";
}, {
    "typed": "typed";
    "focus": "focus";
    "blur": "blur";
    "open": "open";
    "close": "close";
    "select": "select";
    "remove": "remove";
    "navigated": "navigated";
    "selectionChanges": "selectionChanges";
}, ["templateOption", "templateSelectedOption", "templateOptionNotFound"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlbGVjdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmd4LXNlbGVjdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTRIQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudENoZWNrZWQsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSXRlcmFibGVEaWZmZXJzLCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0aW9uVG9rZW4sIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5neFNlbGVjdE9wdGlvbiwgVFNlbGVjdE9wdGlvbiB9IGZyb20gJy4vbmd4LXNlbGVjdC5jbGFzc2VzJztcbmltcG9ydCB7IE5neFNlbGVjdE9wdGlvbkRpcmVjdGl2ZSwgTmd4U2VsZWN0T3B0aW9uTm90Rm91bmREaXJlY3RpdmUsIE5neFNlbGVjdE9wdGlvblNlbGVjdGVkRGlyZWN0aXZlIH0gZnJvbSAnLi9uZ3gtdGVtcGxhdGVzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJTmd4T3B0aW9uTmF2aWdhdGVkLCBJTmd4U2VsZWN0T3B0aW9uLCBJTmd4U2VsZWN0T3B0aW9ucyB9IGZyb20gJy4vbmd4LXNlbGVjdC5pbnRlcmZhY2VzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE5HWF9TRUxFQ1RfT1BUSU9OUzogSW5qZWN0aW9uVG9rZW48YW55PjtcbmV4cG9ydCBpbnRlcmZhY2UgSU5neFNlbGVjdENvbXBvbmVudE1vdXNlRXZlbnQgZXh0ZW5kcyBNb3VzZUV2ZW50IHtcbiAgICBjbGlja2VkU2VsZWN0Q29tcG9uZW50PzogTmd4U2VsZWN0Q29tcG9uZW50O1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4U2VsZWN0Q29tcG9uZW50IGltcGxlbWVudHMgSU5neFNlbGVjdE9wdGlvbnMsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBEb0NoZWNrLCBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgc2FuaXRpemVyO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgaXRlbXM6IGFueVtdO1xuICAgIG9wdGlvblZhbHVlRmllbGQ6IHN0cmluZztcbiAgICBvcHRpb25UZXh0RmllbGQ6IHN0cmluZztcbiAgICBvcHRHcm91cExhYmVsRmllbGQ6IHN0cmluZztcbiAgICBvcHRHcm91cE9wdGlvbnNGaWVsZDogc3RyaW5nO1xuICAgIG11bHRpcGxlOiBib29sZWFuO1xuICAgIGFsbG93Q2xlYXI6IGJvb2xlYW47XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBub0F1dG9Db21wbGV0ZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBkZWZhdWx0VmFsdWU6IGFueVtdO1xuICAgIGF1dG9TZWxlY3RTaW5nbGVPcHRpb246IGJvb2xlYW47XG4gICAgYXV0b0NsZWFyU2VhcmNoOiBib29sZWFuO1xuICAgIG5vUmVzdWx0c0ZvdW5kOiBzdHJpbmc7XG4gICAga2VlcFNlbGVjdGVkSXRlbXM6IGZhbHNlO1xuICAgIHNpemU6ICdzbWFsbCcgfCAnZGVmYXVsdCcgfCAnbGFyZ2UnO1xuICAgIHNlYXJjaENhbGxiYWNrOiAoc2VhcmNoOiBzdHJpbmcsIGl0ZW06IElOZ3hTZWxlY3RPcHRpb24pID0+IGJvb2xlYW47XG4gICAgYXV0b0FjdGl2ZU9uTW91c2VFbnRlcjogYm9vbGVhbjtcbiAgICBzaG93T3B0aW9uTm90Rm91bmRGb3JFbXB0eUl0ZW1zOiBib29sZWFuO1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICBrZWVwU2VsZWN0TWVudU9wZW5lZDogYm9vbGVhbjtcbiAgICBhdXRvY29tcGxldGU6IHN0cmluZztcbiAgICBkcm9wRG93bk1lbnVPdGhlckNsYXNzZXM6IHN0cmluZztcbiAgICBrZXlDb2RlVG9SZW1vdmVTZWxlY3RlZDogc3RyaW5nO1xuICAgIGtleUNvZGVUb09wdGlvbnNPcGVuOiBzdHJpbmdbXTtcbiAgICBrZXlDb2RlVG9PcHRpb25zQ2xvc2U6IHN0cmluZztcbiAgICBrZXlDb2RlVG9PcHRpb25zU2VsZWN0OiBzdHJpbmdbXTtcbiAgICBrZXlDb2RlVG9OYXZpZ2F0ZUZpcnN0OiBzdHJpbmc7XG4gICAga2V5Q29kZVRvTmF2aWdhdGVQcmV2aW91czogc3RyaW5nO1xuICAgIGtleUNvZGVUb05hdmlnYXRlTmV4dDogc3RyaW5nO1xuICAgIGtleUNvZGVUb05hdmlnYXRlTGFzdDogc3RyaW5nO1xuICAgIHR5cGVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGJsdXI6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBvcGVuOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY2xvc2U6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBzZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHJlbW92ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmF2aWdhdGVkOiBFdmVudEVtaXR0ZXI8SU5neE9wdGlvbk5hdmlnYXRlZD47XG4gICAgc2VsZWN0aW9uQ2hhbmdlczogRXZlbnRFbWl0dGVyPElOZ3hTZWxlY3RPcHRpb25bXT47XG4gICAgcHJvdGVjdGVkIG1haW5FbFJlZjogRWxlbWVudFJlZjtcbiAgICBpbnB1dEVsUmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBjaG9pY2VNZW51RWxSZWY6IEVsZW1lbnRSZWY7XG4gICAgdGVtcGxhdGVPcHRpb246IE5neFNlbGVjdE9wdGlvbkRpcmVjdGl2ZTtcbiAgICB0ZW1wbGF0ZVNlbGVjdGVkT3B0aW9uOiBOZ3hTZWxlY3RPcHRpb25TZWxlY3RlZERpcmVjdGl2ZTtcbiAgICB0ZW1wbGF0ZU9wdGlvbk5vdEZvdW5kOiBOZ3hTZWxlY3RPcHRpb25Ob3RGb3VuZERpcmVjdGl2ZTtcbiAgICBvcHRpb25zT3BlbmVkOiBib29sZWFuO1xuICAgIG9wdGlvbnNGaWx0ZXJlZDogVFNlbGVjdE9wdGlvbltdO1xuICAgIHByaXZhdGUgb3B0aW9uQWN0aXZlO1xuICAgIHByaXZhdGUgaXRlbXNEaWZmZXI7XG4gICAgcHJpdmF0ZSBkZWZhdWx0VmFsdWVEaWZmZXI7XG4gICAgcHJpdmF0ZSBhY3R1YWxWYWx1ZTtcbiAgICBzdWJqT3B0aW9uczogQmVoYXZpb3JTdWJqZWN0PFRTZWxlY3RPcHRpb25bXT47XG4gICAgcHJpdmF0ZSBzdWJqU2VhcmNoVGV4dDtcbiAgICBwcml2YXRlIHN1YmpPcHRpb25zU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBzdWJqRXh0ZXJuYWxWYWx1ZTtcbiAgICBwcml2YXRlIHN1YmpEZWZhdWx0VmFsdWU7XG4gICAgcHJpdmF0ZSBzdWJqUmVnaXN0ZXJPbkNoYW5nZTtcbiAgICBwcml2YXRlIGNhY2hlT3B0aW9uc0ZpbHRlcmVkRmxhdDtcbiAgICBwcml2YXRlIGNhY2hlRWxlbWVudE9mZnNldFRvcDtcbiAgICBwcml2YXRlIF9mb2N1c1RvSW5wdXQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGdldCBpbnB1dFRleHQoKTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhYmxlRGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBkZWZhdWx0T3B0aW9uczogSU5neFNlbGVjdE9wdGlvbnMpO1xuICAgIHNldEZvcm1Db250cm9sU2l6ZShvdGhlckNsYXNzTmFtZXM/OiBvYmplY3QsIHVzZUZvcm1Db250cm9sPzogYm9vbGVhbik6ICh7XG4gICAgICAgICdmb3JtLWNvbnRyb2wtc20gaW5wdXQtc20nOiBib29sZWFuO1xuICAgICAgICAnZm9ybS1jb250cm9sLWxnIGlucHV0LWxnJzogYm9vbGVhbjtcbiAgICB9ICYgb2JqZWN0KSB8ICh7XG4gICAgICAgICdmb3JtLWNvbnRyb2wtc20gaW5wdXQtc20nPzogdW5kZWZpbmVkO1xuICAgICAgICAnZm9ybS1jb250cm9sLWxnIGlucHV0LWxnJz86IHVuZGVmaW5lZDtcbiAgICB9ICYgb2JqZWN0KTtcbiAgICBzZXRCdG5TaXplKCk6IHtcbiAgICAgICAgJ2J0bi1zbSc6IGJvb2xlYW47XG4gICAgICAgICdidG4tbGcnOiBib29sZWFuO1xuICAgIH07XG4gICAgZ2V0IG9wdGlvbnNTZWxlY3RlZCgpOiBOZ3hTZWxlY3RPcHRpb25bXTtcbiAgICBtYWluQ2xpY2tlZChldmVudDogSU5neFNlbGVjdENvbXBvbmVudE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIGRvY3VtZW50Q2xpY2soZXZlbnQ6IElOZ3hTZWxlY3RDb21wb25lbnRNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBwcml2YXRlIG9wdGlvbnNGaWx0ZXJlZEZsYXQ7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0ZU9wdGlvbjtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGNhbkNsZWFyTm90TXVsdGlwbGUoKTogYm9vbGVhbjtcbiAgICBmb2N1c1RvSW5wdXQoKTogdm9pZDtcbiAgICBpbnB1dEtleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHRyYWNrQnlPcHRpb24oaW5kZXg6IG51bWJlciwgb3B0aW9uOiBUU2VsZWN0T3B0aW9uKTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGNoZWNrSW5wdXRWaXNpYmlsaXR5KCk6IGJvb2xlYW47XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGlucHV0S2V5VXAodmFsdWU6IHN0cmluZywgZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBpbnB1dENsaWNrKHZhbHVlPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgc2FuaXRpemUoaHRtbDogc3RyaW5nKTogU2FmZUh0bWw7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGhpZ2hsaWdodE9wdGlvbihvcHRpb246IE5neFNlbGVjdE9wdGlvbik6IFNhZmVIdG1sO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvcHRpb25TZWxlY3Qob3B0aW9uOiBOZ3hTZWxlY3RPcHRpb24sIGV2ZW50PzogRXZlbnQpOiB2b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBvcHRpb25SZW1vdmUob3B0aW9uOiBOZ3hTZWxlY3RPcHRpb24sIGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9wdGlvbkFjdGl2YXRlKG5hdmlnYXRlZDogSU5neE9wdGlvbk5hdmlnYXRlZCk6IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG9uTW91c2VFbnRlcihuYXZpZ2F0ZWQ6IElOZ3hPcHRpb25OYXZpZ2F0ZWQpOiB2b2lkO1xuICAgIHByaXZhdGUgZmlsdGVyT3B0aW9ucztcbiAgICBwcml2YXRlIGVuc3VyZVZpc2libGVFbGVtZW50O1xuICAgIHNob3dDaG9pY2VNZW51KCk6IGJvb2xlYW47XG4gICAgb3B0aW9uc09wZW4oc2VhcmNoPzogc3RyaW5nKTogdm9pZDtcbiAgICBvcHRpb25zQ2xvc2UoKTogdm9pZDtcbiAgICBwcml2YXRlIGJ1aWxkT3B0aW9ucztcbiAgICBwcml2YXRlIGJ1aWxkT3B0aW9uO1xuICAgIG9uQ2hhbmdlOiAodjogYW55KSA9PiBhbnk7XG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHt9KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=